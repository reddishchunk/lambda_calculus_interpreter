License: MPL 2.0 (See LICENSE file for more info!)

Contributor Note: All contributors must include the following comment at the top of each source file:
/* LICENSE: MPL2.0 (SEE LICENSE FILE FOR MORE INFORMATION)
 * AUTHOR: (insert username/name here)
 * DATE: (current date of format YYYY/MM/DD)      // year/month/day
 */

Note: If co-authoring or changing a piece of existent code, add your own LICENSE, AUTHOR, and DATE fields below the previous fields created by other(s).

The Lambda Calculus Interpreter is designed as an interpreter to interpret lambda calculus expressions. This source code is for the typed lambda calculus evaluator.

The LCI is designed to run source code directly without compilation or intermediate bytecode. Design considerations for the LCI should emphasize readability of code, with optimizations being explicit in detail and weighted against maintainability of code. Naming should make code blocks self explanatory, with comments demonstrating functionality where necessary, and at the top of files to demonstrate a summary of implementation details. The project is to be made in C99, following K&R conventions and style. Data should be kept within nearest scope within reason.

Components of this project include:
	- Buffer to handle loading file into memory
	- Lexer to convert buffer into tokens
	- Parser to construct AST tree out of tokens
	- Evaluation of AST tree
	Notes:
	* Between the lexer and the parser, processing functionality should be delegated to 
	  the lexer when possible.
	* Default configurations and outside dependencies should be kept to a minimum. 
          The C standard library should be used extensively, reserving outside libraries only
          in cases that are strictly necessary.
	* Typed lambda calculus should be handled in a way that mirrors its evaluation by hand.
	* The LCI does not implement a garbage collector. Freeing of pointers must be done explicitly.
